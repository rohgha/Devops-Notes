
##############
18th May 2023
##############	

		CI / CD ---> 

		Jenkins - Build Orchestration Tool ::::

		Code Integration ???

		C-Developement
		C-Integration		--->	
		C-Delivery
		C-Deployment
		

		Continuous Integration ==> 


		Jenkins --> Build Orchestration Tool

			Developer -->
				Create src code & push the code to src code repository (Manual Activities) 
					Build src code --> Maven build tool -- artifacts
					Published to QA - Test environment
					QA - Testing

					Published to UAT Environment
					UAT Testing
					Promote to Pre-prod
					Deploy to PROD
					Prod Testing
					Prod Monitoring

		Jenkins -->> Build Orchestration Tool - Is a Master Slave Architecture. 
			Is used to distribute the Jenkins Workload to slave machines.
			Extensive list of Plugins
			Documentation
			Use Groovy Scripts to create Jenkins Pipeline Projects.

		- Jenkins Master (VM) --> Used to craete Jenkins jobs/project & Schedule the jobs to slave Nodes
			Jenkins Slave --> Build servers


		src code - java_maven_web_application
			automated build & create artifacts. 
		

		Jenkins Jobs Example :::

					Automated Build using Maven build tool
					Create Artifacts
					Published to QA - Test environment
					Automated Testing

		Jenkins Slave Machines are used to run the jenkins Jobs.

		Process :::
			
		 - Master (Create jobs)
			Jenkins Slave --> Build servers used to run the jenkins job.

		Jenkins Master -- VM 		==> Craete Jenkins jobs/project & Schedule the jobs to slave Nodes
			slave1 -- Java Application - maven (Workspace)
			slave2 -- Python Application
			slave3 -- .Net Application
			slave4 -- Angular Application
			slave5 -- NodeJS Application

		
		Alternatives to Jenkins :

			Bamboo
			gitlab-ci
			az-pipeline
			aws-code-pipeline		

		Developers are just the consumers 

		As a DevOps Engineer, What is your role in Jenkins ???

		Jenkins Administrator :::
			- Installation of Jenkins
			- Plugins Management
			- User Management
			- Tools Management
			- Slave/Nodes Management
			- Jenkins Security Management
			- User Access Management
			- Credential Management
			- Creating the CI/CD pipeline Projects
			- Onboard Applications to Jenkins CI/CD Pipelines
			- Jenkins Server(Master&Slaves) Managements
				Security Patch update
				Jenkins Upgrade including plugins
			- Backup & Recovery


		- Installation of Jenkins	
			Dedicated Server to install Jenkins.
				Windows/Linux/Mac
			Containers - Docker / Kubernetes

			Linux is preferred to install Jenkins.
				Centos/RHEL/Ubundu/Fedora/ 

		- Installation of Jenkins in AWS Ubuntu Machine
			Slave Machines 	Ubuntu 
			Test Server	Ubuntu


First Launch AWS Ubuntu Machines (Master)

Add Inbound Rule to security group
port 8080


https://www.jenkins.io/doc/book/installing/

sudo apt update
sudo apt install openjdk-11-jre
java -version

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins			




##############
22nd May 2023
##############	

	Continuous Integration using Jenkins :::

	How to perform Automated Build, Automated Unit Testing and Create Artifacts for Java Maven Web Application ::::

	Build Tool ::: Maven
	
	Jenkins Master ::: 	To Define --> the Jenkins Job/Project -> freestyle/pipeline Project 
			  	Schedule the Job/Project to execute in Slave Machines

	Jenkins Slave ::: 	Is to exec the jobs

	Pipeline Project :::
		- Scripted Pipeline 
			
		- Declarative Pipeline

	How to create a simple Jenkins pipeline project 
	Enhance the same with build tools
	Enhance the same with Master/Slave Architecture.



Jenkins CI/CD Pipeline Jobs:::

	composed of various stages ::
	
	C_Development --> CI/CD - Workflow :::


	1. Developers - Create the source code 
	2. Push the src code to github repo.
	3. build & Create artifacts, 
	4. Promote the appln. to Test Environment
	5. Perform automated Testing - QA / UAT  
	6. Deploy to Production


	C_Development ::

	1. Developers - Create the source code 
	2. Push the src code to github repo.

	CI/CD - Workflow ::

	1. SCM - Checkout Stage
		--> Clone / Copy the src code from remote git repo. to Jenkins Build server
	2. Build Stage
		--> Compile, Perform Automated Unit Testing, Create Artifact
	3. Deploy Stage to QA Test Server 
		--> Copy the artifacts from Jenkins Build Server to QA-Test Server


pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "slave_maven"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
	}
        stage('Maven Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
	}
}
}
	

pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "slave_maven"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
	}
        stage('Maven Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
	}
}
}



Maven Tools Installation :::

	apt-get update -y
	apt-get install openjdk-17-jdk -y
	java --version
	apt-get install maven -y
	mvn --version




	


##############
23rd May 2023
##############	

	Jenkins Master / Slave Configuration :::

		1. Launch 2 Vms - (1 Jenkins MAster / Slave)
			Jenkins Master ::	Ubuntu(Prev.Version) --> java, jenkins
			Jenkins Slave1 ::	Ubuntu(Prev.Version) --> java, maven, git

		2. Add Users to Jenkins Slave Machine
		3. Create SSH Keys --> 
			private and public keys 

				Type of SSH Key is based on the version of Linux Distribution.
					RSA
					OPENSSH
			ssh-keygen -t rsa -b 4096 -m PEM
			ssh-keygen ===> Create 


		4. Configure Nodes in the Jenkins Console.


IN SLAVE Machine :::

#INSTALL BUILD TOOLS :::

	sudo apt update
	sudo apt install openjdk-11-jre
	java -version
	apt-get install maven -y
	mvn --version


#Add User : 

	useradd -m -d /home/devopsadmin devopsadmin

#useradd devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 4096 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public

#cat id_rsa & copy the private key and paste it into jenkins node config. enter private key directly field.  Then,
cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh


chown -R devopsadmin1 /home/devopsadmin1/.ssh
chmod 600 /home/devopsadmin1/.ssh/authorized_keys
chmod 700 /home/devopsadmin1/.ssh

ON JENKINS CONSOLE :::

	1. goto manage jenkins --> Manage Nodes
	2. Add Node
	3. Configure Node
		host - private ip addr of Node
		credentials to be created with private key of devopsadminuser
		host key verification strategy - Manual choose host key verification strategy (3rd option)
		
	4. Global Tool Config. - Add Maven Path
	5. Create pipeline project


##############
24th May 2023
##############	
	
	

	CI/CD - Workflow ::

	1. SCM - Checkout Stage
		--> Clone / Copy the src code from remote git repo. to Jenkins Build server
	2. Build Stage
		--> Compile, Perform Automated Unit Testing, Create Artifact
	3. Deploy Stage to QA Test Server 
		--> Copy the artifacts from Jenkins Build Server to QA-Test Server


	How to Configure Application_Server to run the application :::

	What is Application Server ???

	Non-Prod						Prod
	Dev_Server (VM)
	Build_Server 
	Test_Servers/Target_Server/Hosted Server (VM)
		Application_Server (Software)
			Eg.: Tomcat / Nginx	
	  QA/UAT	



	SCM_Checkout	-> 	Build		->	Deploy the artifacts to Target_Server


	Jenkins_Architecture ::
		1. Jenkins_Master
			Jenkins_Slave (*.war)
		2. Test_Server

	How to Configure the Application_Server :::

		1. Launch an Instance(ubuntu)
		2. jdk
		3. Define Envi. for JAVA_HOME
		4. Install Tomcat 
			https://tomcat.apache.org/download-80.cgi
		5. Start Tomcat Server
		
		
		6. Configure Tomcat Server in Jenkins Master

			6.1 Create user in tomcat server
			6.2 Create SSH-Key to the user
			6.3 Grant access to Tomcat Server

			6.4 Login to Jenkins Console
			6.5 Use Pubish over ssh plugins to connect to Tomcat Server
				GOTO Manage Jenkins --> Manage Plugins --> Available Tab 
							--> search for Pubish over ssh plugins --> Install & Restart Jenkins
	
		7. Deploy the web application using CI/CD Pipeline
		8. Run the web application using External IP Address of Tomcat Server & port : 8080



	Deployment :::
	
		Copy the artifact from <Source_Server> to <Target_Server>

		Copy the artifact 

	from:  	/home/devopsadmin/workspace/SA17-Pipeline-MVN_Build_Project/target/mvn-hello-world.war 

	to:	/opt/tomcat/webapps/mvn-hello-world.war 




pipeline {
    agent { label 'slave1' }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "maven"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
	}
        stage('Maven Build') {
            steps {
                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
	}
        stage('Deploy to Tomcat Server') {
            steps {
		script {
		sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
		}
            }
	}
}
}




Build Triggers ::::

	Build Periodic ::
		Used to trigger the jenkins job based on the schedule.
		Trigger the jobs irrespective of any src code commit. 

	Poll SCM
		Used to trigger the jenkins job based on the schedule.
		Trigger the job only of there is any changes happened in source code repository. 
		GIT should be installed in Jenkins_Master.	

	Github Webhook
		Used to trigger the jenkins job Whenever the commit happened in the source code repository.
		Trigger the job as soon as the commit happened in the repo. It will never wait for any schedule. 
		GIT should be installed in Jenkins_Master.

		Should configure Jenkins payload url and config github webhook in github repo.

		http://<Jenkins_Server_URL>/github-webhook/
		Eg.: http://13.126.225.245:8080/github-webhook/



Install TOMCAT Application Server on Ubuntu :::

sudo apt update
sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-11-openjdk-amd64/

vi /etc/profile

export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

Install Tomcat ::

cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.88/bin/apache-tomcat-8.5.88.tar.gz
tar -xvzf /opt/apache-tomcat-8.5.88.tar.gz

mv apache-tomcat-8.5.88 tomcat

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh
		
****************************************************************************************************

#Add-User for Tomcat :

#useradd -m -d /home/devopsadmin devopsadmin
#useradd devopsadmin

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 4096 -m PEM

ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public

cd /home/devopsadmin/.ssh

cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

#make devopsadmin user as a owner to tomcat dir :

chown -R devopsadmin /opt/tomcat

/home/devopsadmin





##############
25th May 2023
##############	

		Java Application ::: built and deploy
	
			Testing -->
				Dev --> unit test -> test cases, test data  -- 20 scenarios


				15 --->
					CODE COVERAGE TOOL::
						JaCoCo - Java Code Coverage

			Promote t code to QA envi,


			SCM CHK OUT --> BUILD CREATE ARTIFACTS --> DEPLOY TO QA ENVI. --> D,T

		EMail Notifications :::

			
Email Notification Plugins :::

SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Account Settings

Security 

Create App Token --- 16 



	Containerization :::: Docker 

		https://hub.docker.com/

	Docker & Kubernetes **********

	Docker --> It is a Containerization Tool :::

	Used to Create Docker Images and Containers --->


	Virtual Machines ???

	What is the Need for VM ???

		To scale h/w s/w update ???


	To work on more than one OS.

		

		Hypervisor		






	Virtual Machines ::::

	- VMs are used to run multiple OS.
	- It is Hardware level Virtualization.	
	- It is used to run OS.
	- It required huge space
	- Consume time to start up.



In any cloud platform :::

Regions --> 
	Availability Zones
	  Data Centers(Servers)

ap-south1a --> Virtual Machines..


	Virtual Machines ::::

	- VMs are used to run multiple OS.
	- It is Hardware level Virtualization.	
	- It is used to run OS.
	- It required huge space
	- Consume time to start up.
	- VM will continue to runn even if the application is completed.

	Containers ::::

	- Containers are not to run operating systems.
	- Containers are OS level Virtualization
	- Containers are used to run Application, and NOT Operating System
	- It doesn't require much space, as it is jus used to run applications.
	- It is faster to start up.
	- Containers will exit as soon the application is completed





















